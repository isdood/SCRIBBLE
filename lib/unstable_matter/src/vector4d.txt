//! Vector-Space-Mesh Memory System - Vector Implementation
//! Last Updated: 2025-01-14 05:09:56 UTC
//! Author: isdood
//! Current User: isdood

use core::ops::{Add, Sub, Mul};
use core::default::Default;
use libm;
use crate::helium::Helium;

// Original Vector3D implementation remains the same...
// [Previous Vector3D code remains unchanged]

/// 4D Vector implementation specialized for quantum spacetime operations
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Vector4D<T: PartialEq> {
    pub t: T,  // Time component
    pub x: T,
    pub y: T,
    pub z: T,
}

// Core Vector4D implementation
impl<T> Vector4D<T>
where
    T: PartialEq + Add<Output = T> + Mul<Output = T> + Copy + Default
{
    pub const fn new(t: T, x: T, y: T, z: T) -> Self {
        Self { t, x, y, z }
    }

    /// Minkowski inner product (metric signature: -+++)
    pub fn inner_product(&self, other: &Self) -> T {
        let spatial = self.x * other.x + self.y * other.y + self.z * other.z;
        spatial - (self.t * other.t) // Note the minus sign for time component
    }

    /// Squared spacetime interval
    pub fn interval_squared(&self) -> T {
        self.inner_product(self)
    }
}

// Specialized implementation for f64 with quantum-aware operations
impl Vector4D<f64> {
    /// Computes proper time interval
    pub fn proper_time(&self) -> f64 {
        let interval = self.interval_squared();
        if interval < 0.0 {
            libm::sqrt(-interval) // Timelike interval
        } else {
            0.0 // Spacelike or null interval
        }
    }

    /// Lorentz boost in x-direction
    pub fn boost_x(&self, beta: f64) -> Self {
        let gamma = 1.0 / libm::sqrt(1.0 - beta * beta);
        Self {
            t: gamma * (self.t - beta * self.x),
            x: gamma * (self.x - beta * self.t),
            y: self.y,
            z: self.z,
        }
    }

    /// Check if vector is timelike
    pub fn is_timelike(&self) -> bool {
        self.interval_squared() < 0.0
    }

    /// Check if vector is spacelike
    pub fn is_spacelike(&self) -> bool {
        self.interval_squared() > 0.0
    }

    /// Check if vector is null (lightlike)
    pub fn is_null(&self) -> bool {
        self.interval_squared().abs() < 1e-10
    }

    /// Convert to quantum state
    pub fn to_quantum(&self) -> Helium<Self> {
        Helium::new(*self)
    }

    /// Get spatial components as Vector3D
    pub fn spatial_part(&self) -> Vector3D<f64> {
        Vector3D::new(self.x, self.y, self.z)
    }
}

/// Metric tensor for 4D spacetime calculations
#[derive(Debug, Clone, Copy)]
pub struct MetricTensor {
    components: [[f64; 4]; 4],
}

impl MetricTensor {
    /// Creates Minkowski metric (flat spacetime)
    pub fn minkowski() -> Self {
        let mut components = [[0.0; 4]; 4];
        components[0][0] = -1.0; // Time component
        components[1][1] = 1.0;  // Spatial components
        components[2][2] = 1.0;
        components[3][3] = 1.0;
        Self { components }
    }

    /// Computes metric contraction with two vectors
    pub fn contract(&self, v1: &Vector4D<f64>, v2: &Vector4D<f64>) -> f64 {
        let v1_components = [v1.t, v1.x, v1.y, v1.z];
        let v2_components = [v2.t, v2.x, v2.y, v2.z];

        let mut result = 0.0;
        for i in 0..4 {
            for j in 0..4 {
                result += self.components[i][j] * v1_components[i] * v2_components[j];
            }
        }
        result
    }
}

// Standard operations for Vector4D
impl<T: PartialEq + Add<Output = T>> Add for Vector4D<T> {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            t: self.t + other.t,
            x: self.x + other.x,
            y: self.y + other.y,
            z: self.z + other.z,
        }
    }
}

impl<T: PartialEq + Sub<Output = T>> Sub for Vector4D<T> {
    type Output = Self;

    fn sub(self, other: Self) -> Self {
        Self {
            t: self.t - other.t,
            x: self.x - other.x,
            y: self.y - other.y,
            z: self.z - other.z,
        }
    }
}

impl<T: PartialEq + Mul<Output = T> + Copy> Mul<T> for Vector4D<T> {
    type Output = Self;

    fn mul(self, scalar: T) -> Self {
        Self {
            t: self.t * scalar,
            x: self.x * scalar,
            y: self.y * scalar,
            z: self.z * scalar,
        }
    }
}

pub type Spacetime4D = Vector4D<f64>;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_4d_vector_operations() {
        let v1 = Spacetime4D::new(0.0, 1.0, 0.0, 0.0);
        let v2 = Spacetime4D::new(1.0, 0.0, 0.0, 0.0);

        assert!(v1.is_spacelike());
        assert!(v2.is_timelike());
    }

    #[test]
    fn test_lorentz_boost() {
        let event = Spacetime4D::new(10.0, 5.0, 0.0, 0.0);
        let beta = 0.5; // v = 0.5c
        let boosted = event.boost_x(beta);

        // Verify invariant interval
        assert!((event.interval_squared() - boosted.interval_squared()).abs() < 1e-10);
    }

    #[test]
    fn test_metric_operations() {
        let metric = MetricTensor::minkowski();
        let v1 = Spacetime4D::new(1.0, 0.0, 0.0, 0.0);
        let v2 = Spacetime4D::new(1.0, 0.0, 0.0, 0.0);

        assert_eq!(metric.contract(&v1, &v2), -1.0);
    }

    #[test]
    fn test_quantum_4d_operations() {
        let v = Spacetime4D::new(0.0, 1.0, 0.0, 0.0);
        let quantum_v = v.to_quantum();
        let (loaded_v, coherence) = quantum_v.quantum_load(core::sync::atomic::Ordering::SeqCst);

        assert_eq!(v, loaded_v);
        assert!(coherence <= 1.0);
    }
}
