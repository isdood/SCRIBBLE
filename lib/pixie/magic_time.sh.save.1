cat > ../lazuline/src/lib.zig << 'EOF'
const std = @import("std");

pub const WorkFn = *const fn (*anyopaque) void;

pub const Job = struct {
    context: *anyopaque,
    work_fn: WorkFn,
};

pub const ThreadPool = struct {
    allocator: std.mem.Allocator,
    threads: []std.Thread,
    job_queue: std.atomic.Queue(Job),
    shutdown: std.atomic.Value(bool),

    const Self = @This();
    
    pub fn init(allocator: std.mem.Allocator) !Self {
        const thread_count = try std.Thread.getCpuCount();
        var threads = try allocator.alloc(std.Thread, thread_count);
        
        var pool = Self{
            .allocator = allocator,
            .threads = threads,
            .job_queue = std.atomic.Queue(Job).init(),
            .shutdown = std.atomic.Value(bool).init(false),
        };

        for (threads) |*thread| {
            thread.* = try std.Thread.spawn(.{}, worker, .{&pool});
        }

        return pool;
    }

    pub fn deinit(self: *Self) void {
        self.shutdown.store(true, .Release);
        for (self.threads) |thread| {
            thread.join();
        }
        self.allocator.free(self.threads);
    }

    fn worker(pool: *Self) void {
        while (!pool.shutdown.load(.Acquire)) {
            if (pool.job_queue.get()) |job| {
                job.work_fn(job.context);
            } else {
                std.time.sleep(1 * std.time.ns_per_ms);
            }
        }
    }

    pub fn schedule(self: *Self, context: anytype, comptime work_fn: fn (@TypeOf(context)) void) void {
        const Context = @TypeOf(context);
        const CastedFn = struct {
            fn cast(ptr: *anyopaque) void {
                var ctx: *Context = @alignCast(@ptrCast(ptr));
                work_fn(ctx);
            }
        };

        const job = Job{
            .context = context,
            .work_fn = CastedFn.cast,
        };
        self.job_queue.put(job);
    }

    pub fn wait(self: *Self) void {
        while (self.job_queue.get()) |_| {
            std.time.sleep(1 * std.time.ns_per_ms);
        }
    }
};
EOF
